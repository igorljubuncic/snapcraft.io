name: test-ros2-talker-listener-{name}
download: git clone https://github.com/snapcraft-docs/ros2-talker-listener
createDir: |
  cd ros2-talker-listener
  $EDITOR snapcraft.yaml
metadata: |
  name: ros2-talker-listener
  version: '0.1'
  summary: ROS2 Talker/Listener Example
  description: |
    This example launches a ROS2 talker and listener.
explain:
  metadata:
    - text: The name must be unique in the Snap Store. Valid snap names consist of lower-case alphanumeric characters and hyphens. They cannot be all numbers. They also cannot start or end with a hyphen.
    - code: |
        name: ros2-talker-listener
    - warning: |
        <span class="p-notification__status">Snap names are globally unique.</span> You should change any instance of <code>ros2-talker-listener</code> to <code>test-ros2-talker-listener-{name}</code> (where <code>{name}</code> is your name) before continuing to avoid conflicting with the official ros2-talker-listener snap.
    - text: Versions carry no semantic meaning in snaps. Use text that best identifies that release, it won't be used to compare against the preceding or following one.
    - code: |
        version: '0.1'
    - text: The summary can not exceed 79 characters. You can use a pipe ‘|’ in the description key to declare a multi-line description.
    - code: |
        description: |
  security:
    - text: The next section describes the level of confinement applied to your app.
    - code: |
        confinement: devmode
    - text: Snaps are containerised to ensure more predictable application behaviour and greater security.
    - text: It’s best to start a snap with the confinement in warning mode, rather than strictly applied. This is indicated through the <code>devmode</code> keyword.
    - text: Once an app is working well in devmode, you can review confinement violations, add appropriate interfaces, and switch to strict confinement.
  base:
    - text: In general, snaps cannot see the root filesystem on end user systems. This prevents conflict with other applications and increases security. However, applications still need some location to act as the root filesystem. They would also benefit from common libraries (e.g. libc) being in this root filesystem rather than bundled into each application.
    - text: The base keyword specifies a special kind of snap that provides a minimal set of libraries common to most applications. It will be mounted as the root filesystem for your application.
    - code: |
        base: core18
    - text: The <code>core18</code> base is recommended.
  parts:
    - text: |
        Parts define what sources are needed to assemble your app. Parts can be anything: programs, libraries, or other needed assets.
    - text: The <code>colcon</code> plugin is useful when building ROS2 application parts.
    - text: |
        The plugin points to the ROS2 demos GitHub repository and uses <code>Crystal</code>, the latest ROS2 release available. You can use the <code>colcon-rosdistro</code> keyword to change the ROS distro required by the system. The <code>colcon-source-space</code> points to the source space containing the colcon C++ demo nodes packages. The command <code>snapcraft help colcon</code> gives more information on how this plugin works.
    - code: |
        parts:
          ros-demos:
            plugin: colcon
            source: https://github.com/ros2/demos.git
            source-branch: crystal
            colcon-rosdistro: crystal
            colcon-source-space: demo_nodes_cpp
            build-packages: [make, gcc, g++]
            stage-packages: [ros-crystal-ros2launch]
    - text: |
        The <code>build-packages</code> section lists the dependencies that will be used by snapcraft to build the parts.
    - text: |
        The <code>stage-packages</code> section specifies the list of components required by the ros2-talker-listener snap at runtime.
  apps:
    - text: Apps are the commands you want to expose to users and any background services your application provides. The command that runs within the snap uses the staged <code>ros-crystal-ros2launch</code> package to start the demo nodes talker/listener launch file.
    - code: |
        apps:
          ros2-talker-listener:
            command: opt/ros/crystal/bin/ros2 launch demo_nodes_cpp talker_listener.launch.py
    - warning: |
        <span class="p-notification__status"></span>As before, remember to change this instance of <code>ros2-talker-listener</code> to <code>test-ros2-talker-listener-{name}</code> (where <code>{name}</code> is your name) before continuing to avoid conflicting with the official ros2-talker-listener snap.
    - text: The <code>command</code> specifies the path to the binary to be run. This is resolved relative to the root of your snap contents and automatically searches in the usr/sbin, usr/bin, sbin, and bin subdirectories of your snap.
    - text: If your command name matches the snap name, users will be able run the command directly.
